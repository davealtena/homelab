# vim: sts=2 ts=2 sw=2 et ai
#
# https://github.com/argoproj/argo-helm/blob/main/charts/argo-cd/values.yaml
## Argo CD configuration
## Ref: https://github.com/argoproj/argo-cd

crds:
  keep: false # on chart uninstall

global:
  # domain: "https://argocd.altena.io" #TODO: Template
  logging:
    level: warn
    format: text

## Argo Configs
configs:
  params:
    server.insecure: true # ALB handles encryption

  # https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/argocd-cm.yaml
  cm:
    create: true
    annotations: {}

    # url: "https://argocd.altena.io" #TODO: Template

    ui.bannercontent: "WELCOME TO ARGOCD"
    ui.bannerpermanent: "true"
    ui.bannerposition: "top"

    server.rbac.log.enforce.enable: true

    # Fetch password with:  kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d
    admin.enabled: true

  rbac:
    policy.default: role:readonly

    # -- File containing user-defined policies and role definitions.
    # @default -- `''` (See [values.yaml])
    # Policy rules are in the form:
    #  p, subject, resource, action, object, effect
    # Role definitions and bindings are in the form:
    #  g, subject, inherited-subject
    policy.csv:  |
      g, app-argocd-admins, role:admin

    # -- OIDC scopes to examine during rbac enforcement (in addition to `sub` scope).
    # The scope value can be a string, or a list of strings.
    scopes: '[email,groups]'

  styles: |
    .ui-banner {
      background: #D0312D;
      color: #fff;
    }

controller:
  replicas: 2
  topologySpreadConstraints: []
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true

dex: # required for okta
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true

redis:
  enabled: false

# https://github.com/DandyDeveloper/charts/tree/master/charts/redis-ha
redis-ha:
  enabled: true
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true

applicationSet:
  replicaCount: 2
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true

server:
  insecure: true
  autoscaling:
    enabled: true
    minReplicas: 2
  service:
    type: ClusterIP
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true
  ingress:
    enabled: true
    ingressClassName: "internal"

## Repo Server
repoServer:
  autoscaling:
    enabled: true
    minReplicas: 2
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true
